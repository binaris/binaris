---
- test: Test help output
  steps:
    -   in: bn --help | sed 's/^.\{2\}//'
        out: |-

            Usage: bn [options] [command]

            Binaris command line interface


            Options:

              -V, --version      output the version number
              -p, --path <path>  Use directory dir. "create" will create this directory if needed.
              -h, --help         output usage information


            Commands:

              login              Login to your Binaris account using an API key
              logs [options]     Print the logs of a function
              create [options]   Create a function from template
              deploy [options]   Deploys a function to the cloud
              remove [options]   Remove a previously deployed function
              invoke [options]   Invoke a Binaris function

- test: Test login(good-path)
  setup:
    - export SOME_KEY=9557231848
  cleanup:
    - bn remove
  steps:
    -   in: bn create
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy" to deploy the function)
    -   in: echo "$SOME_KEY" | bn login
        out: |-
            Please enter your Binaris API key to deploy and invoke functions.
            If you don't have a key, head over to https://binaris.com to request one
            *? API Key: 9557231848*
            *Authentication Succeeded*
              (use "bn create" to create a template function in your current directory)
    -   in: bn deploy
        out: |-
            Deployed function to *
              (use "bn invoke" to invoke the function)

- test: Test create(good-path)
  steps:
    -   in: bn create
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy" to deploy the function)
    -   in: bn create -f purplecannon -p /home/dockeruser/test/purplecannon
        out: |-
            Created function purplecannon in /home/dockeruser/test/purplecannon
              (use "bn deploy -p /home/dockeruser/test/purplecannon -f purplecannon" to deploy the function)

- test: Test deploy(good-path)
  setup:
    - export BINARIS_API_KEY=9557231848
  cleanup:
    - bn remove
  steps:
    -   in: bn create
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy" to deploy the function)
    -   in: bn deploy
        out: |-
            Deployed function to *
              (use "bn invoke" to invoke the function)
    -   in: bn deploy
        out: |-
            Deployed function to *
              (use "bn invoke" to invoke the function)

- test: Test invoke(good-path)
  setup:
    - export BINARIS_API_KEY=9557231848
    - |-
      echo '{"name": "unguessable"}' > invoke.json
  cleanup:
    - bn remove
  steps:
    -   in: bn create
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy" to deploy the function)
    -   in: bn deploy
        out: |-
            Deployed function to *
              (use "bn invoke" to invoke the function)
    -   in: sleep 5
    -   in: bn invoke
        out: Hello World!
    -   in: |-
            bn invoke -d '{"name": "unguessable"}'
        out: Hello unguessable!
    -   in: bn invoke -j invoke.json
        out: Hello unguessable!

- test: Test logs(good-path)
  setup:
    - export BINARIS_API_KEY=9557231848
  cleanup:
    - bn remove
  steps:
    -   in: bn create
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy" to deploy the function)
    -   in: bn deploy
        out: |-
            Deployed function to *
              (use "bn invoke" to invoke the function)
    -   in: sleep 5
    -   in: bn invoke
        out: Hello World!
    -   in: sleep 15
    -   in: bn logs
        out: "[201*-*-*T*:*:*Z] Hello World!"
    -   in: |-
            bn invoke -d '{"name": "again"}' 
        out: Hello again!
    -   in: sleep 15
    -   in: bn logs
        out: |-
          [201*-*-*T*:*:*Z] Hello World!
          [201*-*-*T*:*:*Z] Hello again!
    -   in: |-
            bn invoke -d '{"name": "for the last time"}' 
        out: Hello for the last time!
    -   in: sleep 15
    -   in: bn logs
        out: |-
          [201*-*-*T*:*:*Z] Hello World!
          [201*-*-*T*:*:*Z] Hello again!
          [201*-*-*T*:*:*Z] Hello for the last time!

- test: Test deploy invoke remove cycle commands(good-path)
  setup:
    - export BINARIS_API_KEY=9557231848
  steps:
    -   in: bn create
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy" to deploy the function)
    -   in: bn deploy
        out: |-
            Deployed function to *
              (use "bn invoke" to invoke the function)
    -   in: sleep 4
    -   in: bn invoke
        out: Hello World!
    -   in: bn remove
        out: |-
            Removed function *
              (use "bn deploy" to re-deploy the function)

- test: Test login(bad-path)
  steps:
    -   in: bn create
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy" to deploy the function)
    -   in: echo "9239239" | bn login
        err: Invalid API key
        exit: 1

- test: Test create(bad-path)
  steps:
    -   in: bn create -f a*b*c*
        err: Invalid characters in function name a*b*c*. Use only letters and digits
        exit: 1
    -   in: bn create -f a_b%c#d@e+
        err: Invalid characters in function name a_b%c#d@e+. Use only letters and digits
        exit: 1
    -   in: bn create -f a=b~c,d.
        err: Invalid characters in function name a=b~c,d.. Use only letters and digits
        exit: 1
    -   in: bn create -f a:b?c!d-
        err: Invalid characters in function name a:b?c!d-. Use only letters and digits
        exit: 1
    -   in: bn create -f tooooooooooooooooooooooooooooooooooooooooooooooolongggggggggggggggggggggggggggggggggggggggggggggggggggggggggg
        err: Function names cannot be longer than 58 characters.
        exit: 1

- test: Test invoke(bad-path)
  steps:
    -   in: bn create -p /home/dockeruser/test/alloftheoptions
    -   in: bn invoke -p /home/dockeruser/test/alloftheoptions -j myFile.json -d data
        err: Invoke flags --json(-j) and --data(-d) are mutually exclusive
        exit: 1
    -   in: bn invoke -p /home/dockeruser/test/alloftheoptions/ -j myFile.json
        err: "ENOENT: no such file or directory, open 'myFile.json'"
        exit: 1

- test: Invalid name in binaris.yml (bad-path)
  setup:
    - bn create
    # replace line 2 of binaris.yml(function name) with a bad function name
    - sed -i '2 c \  inv*a#l@i-d:' binaris.yml
  steps:
    - in: bn deploy
      err: Invalid characters in function name inv*a#l@i-d. Use only letters and digits
      exit: 1

- test: Unknown command(bad-path)
  steps:
    -   in: bn alwaysbad
        err: "Unknown command: 'alwaysbad'. See 'bn --help'"
        exit: 1

- test: No permission
  setup:
    - mkdir /home/dockeruser/test/securedir
    - echo binaris | sudo  -S chown root:root /home/dockeruser/test/securedir
    - echo binaris | sudo  -S chmod 700 /home/dockeruser/test/securedir
  steps:
    -   in: bn create -p /home/dockeruser/test/securedir
        err: "EACCES: permission denied, unlink '/home/dockeruser/test/securedir/function.js'"
        exit: 1

- test: Superfluous output(bad-path)
  steps:
    -   in: bn create init init
        err: Argument "*" is not a valid input to *
        exit: 1
    -   in: bn create sadmksad
        err: Argument "sadmksad" is not a valid input to create
        exit: 1
    -   in: bn deploy init
        err: Argument "init" is not a valid input to deploy
        exit: 1
    -   in: bn logs notlogs
        err: Argument "notlogs" is not a valid input to logs
        exit: 1

- test: No such path(bad-path)
  steps:
    -   in: bn deploy -p /home/dockeruser/test/bogus/comeon/really/hello.js
        err: "ENOENT: no such file or directory, open '/home/dockeruser/test/bogus/comeon/really/hello.js/binaris.yml'"
        exit: 1
    -   in: bn invoke -p /home/dockeruser/test/never/will/exist
        err: "ENOENT: no such file or directory, open '/home/dockeruser/test/never/will/exist/binaris.yml'"
        exit: 1
    -   in: bn remove -p /home/dockeruser/test/hocus/pocus/fairy
        err: "ENOENT: no such file or directory, open '/home/dockeruser/test/hocus/pocus/fairy/binaris.yml'"
        exit: 1
    -   in: bn logs -p /home/dockeruser/test/what/ifitdidnt/exist
        err: "ENOENT: no such file or directory, open '/home/dockeruser/test/what/ifitdidnt/exist/binaris.yml'"
        exit: 1

- test: No binaris.yml in directory(bad-path)
  setup:
    - mkdir -p /home/dockeruser/test/trollycopter
  steps:
    -   in: bn invoke -p /home/dockeruser/test/trollycopter -f icydiceymolecule
        err: "ENOENT: no such file or directory, open '/home/dockeruser/test/trollycopter/binaris.yml'"
        exit: 1

- test: No matching function(bad-path)
  steps:
    -   in: bn create -f unrelatedname
    -   in: bn deploy -f grouchybear
        err: Cannot find function 'grouchybear' in binaris.yml
        exit: 1

- test: No API key or conf file(bad-path)
  steps:
    -   in: bn create
    -   in: bn deploy
        err: Binaris conf file could not be read and BINARIS_API_KEY is undefined, please use "bn login"
        exit: 1

- test: Corrupt binaris conf file(bad-path)
  setup:
    - echo 'INVALIDCONF' | tee /home/dockeruser/.binaris.yml > /dev/null
  steps:
    -   in: bn create
    -   in: bn deploy
        err: Invalid Binaris conf file (missing API key) /home/dockeruser/.binaris.yml
        exit: 1

