---
- test: Test help output
  steps:
    -   in: bn --help
        out: |-
              Binaris command line interface

              Usage: bn <command> [options]

              Commands:
                bn create <runtime> <function> [options]  Create a function from template
                bn deploy <function> [options]            Deploys a function to the cloud
                bn remove <function> [options]            Remove a previously deployed function
                bn invoke <function> [options]            Invoke a Binaris function
                bn list [options]                         List all deployed functions
                bn perf <function> [options]              Measure invocation latency (experimental)
                bn logs <function> [options]              Print the logs of a function
                bn login                                  Login to your Binaris account using an API key and account id

              Options:
                --version   Show version number  [boolean]
                --help, -h  Show help  [boolean]*
- test: Test list help output
  steps:
    -   in: bn list --help
        out: |-
              Usage: bn list [options]

              Options:
                --version   Show version number  [boolean]
                --help, -h  Show help  [boolean]
                --json      Output as JSON*
- test: Test logs help output (good-path)
  steps:
    -   in: bn logs --help
        out: |-
              Usage: bn logs <function> [options]

              Positionals:
                function  Function name  [string] [required]

              Options:
                --version    Show version number  [boolean]
                --help, -h   Show help  [boolean]
                --tail, -t   Outputs logs in "tail -f" fashion  [boolean]
                --since, -s  Outputs logs after the given ISO timestamp  [string]

              Examples:
                  // retrieve all logs
                  bn logs foo

                  // tail all logs
                  bn logs foo --tail

                  // ISO
                  bn logs foo --since 2018-03-09T22:12:21.861Z

                  // unix
                  bn logs foo --since 1520816105798

                  // offset format
                  bn logs foo --since 3d
                  bn logs foo --since 13hours
                  bn logs foo --since 9s*

- test: Test old endpoints
  setup:
    - export FUNC_NAME=rand$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)
    - bn create node8 $FUNC_NAME
    - unset BINARIS_API_KEY
    - unset BINARIS_ACCOUNT_ID
  cleanup:
    - bn remove $FUNC_NAME
  steps:
    - in: echo $BINARIS_TEMPORARY_API_KEY_FOR_TESTING_OLD_ENDPOINTS | bn login
      out: |-
          Please enter your Binaris API key to deploy and invoke functions.
          If you don't have a key, head over to https://binaris.com to request one
          *? API Key: *
          *Authentication Succeeded*
            (use "bn create node8 hello" to create a Node.js template function in your CWD)
    - in: bn deploy $FUNC_NAME
      out: |-
        Deployed function *
        Invoke with one of:
          "bn invoke *"
          "curl https://*"
    - in: bn invoke $FUNC_NAME
      out: '"Hello World!"'
    - in: sleep 5
    - in: bn logs $FUNC_NAME
      out: |-
        [201*-*-*T*:*:*Z] Function * deployed (version digest: *)
        [201*-*-*T*:*:*Z] Function invocation took * us
    - in: bn list --json
      out: |-
        *[*{"name":"rand*","lastDeployed":"[20*-*-*T*:*:*Z]"}*]*

- test: Test login (good-path)
  cleanup:
    - bn remove momentousgiants
  steps:
    -   in: bn create node8 momentousgiants
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy momentousgiants" to deploy the function)
    -   in: echo $BINARIS_API_KEY | bn login
        out: |-
            Please enter your Binaris API key to deploy and invoke functions.
            If you don't have a key, head over to https://binaris.com to request one
            *? API Key: *
            *Authentication Succeeded*
              (use "bn create node8 hello" to create a Node.js template function in your CWD)
    -   in: bn deploy momentousgiants
        out: |-
          Deployed function momentousgiants
          Invoke with one of:
            "bn invoke momentousgiants"
            "curl -H X-Binaris-Api-Key:* https://*"

- test: Test create (good-path)
  steps:
    -   in: bn create node8 snowmanolympics
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy *" to deploy the function)
    -   in: bn create node8 purplecannon -p /home/dockeruser/test/purplecannon
        out: |-
            Created function purplecannon in /home/dockeruser/test/purplecannon
              (use "bn deploy -p /home/dockeruser/test/purplecannon purplecannon" to deploy the function)

- test: Test deploy (good-path)
  cleanup:
    - bn remove drybeef
  steps:
    -   in: bn create node8 drybeef
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy drybeef" to deploy the function)
    -   in: bn deploy drybeef
        out: |-
          Deployed function drybeef
          Invoke with one of:
            "bn invoke drybeef"
            "curl -H X-Binaris-Api-Key:* https://*"
    -   in: bn deploy drybeef
        out: |-
          Deployed function drybeef
          Invoke with one of:
            "bn invoke drybeef"
            "curl -H X-Binaris-Api-Key:* https://*"

- test: Test public deploy (good-path)
  cleanup:
    - bn remove public_drymeat
  steps:
    -   in: bn create node8 public_drymeat
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy public_drymeat" to deploy the function)
    -   in: bn deploy public_drymeat
        out: |-
          Deployed function public_drymeat
          Invoke with one of:
            "bn invoke public_drymeat"
            "curl https://*"

- test: Test Java
  steps:
    -   in: bn create java8 ventimacchiato
    -   in: gradle jar --no-daemon
    -   in: bn deploy ventimacchiato
    -   in: bn invoke ventimacchiato
        out: |-
            *"Hello, world"*
    -   in: bn remove ventimacchiato

- test: Test list
  serial: true
  setup:
      - >
          for i in {1..2};
          do out="$(bn remove listtest$i 2>&1)";
          echo "$out";
          if ! echo "$out" | grep -e "No such function" -e "Removed function"; then false; fi
          done;
  cleanup:
      - >
          for i in {1..2};
          do out="$(bn remove listtest$i 2>&1)";
          echo "$out";
          if ! echo "$out" | grep -e "No such function" -e "Removed function"; then false; fi
          done;
  steps:
    -   in: bn create node8 listtest1
    -   in: bn deploy listtest1
    -   in: bn create node8 listtest2
    -   in: bn deploy listtest2
    -   in: bn list
        out: |-
             FUNCTION                 *LAST DEPLOYED*
             listtest1                *201*-*-*T*:*:*Z*
             listtest2                *201*-*-*T*:*:*Z*
    -   in: bn list --json
        out: |-
            *[*{"name":"listtest1","lastDeployed":"[20*-*-*T*:*:*Z]"}*,*{"name":"listtest2","lastDeployed":"[20*-*-*T*:*:*Z]"}*]*

- test: Test invoke (good-path)
  setup:
    - |-
      echo '{"name": "unguessable"}' > invoke.json
  cleanup:
    - bn remove extrasmallaunt
  steps:
    -   in: bn create node8 extrasmallaunt
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy extrasmallaunt" to deploy the function)
    -   in: bn deploy extrasmallaunt
        out: |-
            Deployed function extrasmallaunt
            Invoke with one of:
              "bn invoke extrasmallaunt"
              "curl -H X-Binaris-Api-Key:* https://*"
    -   in: cd /home/
    -   in: bn invoke extrasmallaunt
        out: |-
            "Hello World!"
    -   in: |-
            bn invoke extrasmallaunt -d '{"name": "unguessable"}'
        out: |-
            "Hello unguessable!"
    -   in: bn invoke extrasmallaunt -j ./dockeruser/test/invoke.json
        out: |-
            "Hello unguessable!"

- test: Block access to internal network
  setup:
      - bn create node8 internalnets
      - npm i request-promise-native request
      - |-
        cat <<EOF >/home/dockeruser/test/function.js

        exports.handler = async() => {
            const rp = require('request-promise-native');
            for (host of ['169.254.169.254', '172.17.0.1', '172.16.0.1']) {
                try {
                    await rp.get('http://' + host);
                    throw new Error('should not be returned');
                } catch (err) {
                    if (err.message.indexOf('ECONNREFUSED ' + host) === -1) {
                        throw err;
                    }
                }
            }
            return true;
        };
        EOF
      - bn deploy internalnets
  cleanup:
      - bn remove internalnets
  steps:
      - in: bn invoke internalnets

- test: Test logs (good-path)
  setup:
    - export FUNC_NAME=rand$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)
    - bn create node8 $FUNC_NAME
    - sed -i '2 a \  console.log(`Hello ${name}!`);' function.js
  cleanup:
    - bn remove $FUNC_NAME
  steps:
    -   in: bn deploy $FUNC_NAME
        out: |-
            Deployed function *
            Invoke with one of:
              "bn invoke *"
              "curl -H X-Binaris-Api-Key:* https://*"
    -   in: bn invoke $FUNC_NAME
        out: |-
            "Hello World!"
    -   in: sleep 5
    -   in: bn logs $FUNC_NAME
        out: |-
          [201*-*-*T*:*:*Z] Hello World!
          [201*-*-*T*:*:*Z] Function invocation took * us
    -   in: |-
          bn invoke $FUNC_NAME -d '{"name": "again"}'
        out: |-
            "Hello again!"
    -   in: sleep 8
    -   in: bn logs $FUNC_NAME
        out: |-
          [201*-*-*T*:*:*Z] Hello World!
          [201*-*-*T*:*:*Z] Function invocation took * us
          [201*-*-*T*:*:*Z] Hello again!
          [201*-*-*T*:*:*Z] Function invocation took * us
    -   in: sleep 15
    -   in: |-
          bn invoke $FUNC_NAME -d '{"name": "for the last time"}'
        out: |-
            "Hello for the last time!"
    -   in: sleep 8
    -   in: bn logs $FUNC_NAME --since 10s
        out: |-
          [201*-*-*T*:*:*Z] Hello for the last time!
          [201*-*-*T*:*:*Z] Function invocation took * us
    -   in: cd /home/
    -   in: bn logs $FUNC_NAME --since 40sec
        out: |-
          [201*-*-*T*:*:*Z] Hello again!
          [201*-*-*T*:*:*Z] Function invocation took * us
          [201*-*-*T*:*:*Z] Hello for the last time!
          [201*-*-*T*:*:*Z] Function invocation took * us

- test: 'Test {PY_VERSION} E2E (good-path)'
  foreach:
    - PY_VERSION: python2
    - PY_VERSION: pypy2
    - PY_VERSION: python3
  setup:
    - export FUNC_NAME={PY_VERSION}$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 32 | head -n 1)
    - 'bn create {PY_VERSION} $FUNC_NAME'
    - |-
      cat > function.py <<EOF
      def handler(body, req):
          name = req.query.get('name') or body.get('name') or 'World'
          out = 'Hello {}!'.format(name)
          print(out)
          return out
      EOF
  cleanup:
    - bn remove $FUNC_NAME
  steps:
    -   in: bn deploy $FUNC_NAME
        out: |-
            Deployed function *
            Invoke with one of:
              "bn invoke *"
              "curl -H X-Binaris-Api-Key:* https://*"
    -   in: |-
          bn invoke $FUNC_NAME -d '{"name": "Binaris"}'
        out: |-
            "Hello Binaris!"
    -   in: sleep 5
    -   in: bn logs $FUNC_NAME
        out: |-
          [201*-*-*T*:*:*Z] Hello Binaris!
          [201*-*-*T*:*:*Z] Function invocation took * us

- test: Test deploy invoke remove cycle commands (good-path)
  steps:
    -   in: bn create node8 gulliblezebra
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy gulliblezebra" to deploy the function)
    -   in: |-
            echo 'exports.handler = () => { s = "Hello World!"; console.log(s); return s; };' >function.js
    -   in: bn deploy gulliblezebra
        out: |-
            Deployed function gulliblezebra
            Invoke with one of:
              "bn invoke gulliblezebra"
              "curl -H X-Binaris-Api-Key:* https://*"
    -   in: bn invoke gulliblezebra
        out: |-
            "Hello World!"
    -   in: bn remove gulliblezebra
        out: |-
            Removed function *
    -   in: sleep 5
    -   in: bn logs gulliblezebra
        out: |-
          *[201*-*-*T*:*:*Z] Function gulliblezebra deployed (version digest:*)*
          *[201*-*-*T*:*:*Z] Hello World!*
          *[201*-*-*T*:*:*Z] Function gulliblezebra removed.*

- test: "envs: deploy invoke remove with secrets"
  steps:
    -   in: bn create node8 secretsanta
    -   in: |-
            cat <<EOF >/home/dockeruser/test/binaris.yml
            functions:
              secretsanta:
                file: function.js
                entrypoint: handler
                runtime: node8
                env:
                    FORWARD_ME:
                    DEFINED_HERE: value
                    BN_FUNCTION: "dont-override"
            EOF
    -   in: |-
            cat <<EOF >/home/dockeruser/test/function.js
            exports.handler = () => [process.env.FORWARD_ME, process.env.DEFINED_HERE, process.env.BN_FUNCTION];
            EOF
    -   in: FORWARD_ME=please bn deploy secretsanta
        out: |-
            Deployed function secretsanta
            Invoke with one of:
              "bn invoke secretsanta"
              "curl -H X-Binaris-Api-Key:* https://*"
    -   in: bn invoke secretsanta
        out: |-
            *["please","value","*secretsanta"]*
    -   in: bn remove secretsanta
        out: |-
            Removed function *

- test: "envs: fail to deploy if non-string in env"
  steps:
    -   in: bn create node8 invalidenv
    -   in: |-
            cat <<EOF >/home/dockeruser/test/binaris.yml
            functions:
              invalidenv:
                file: function.js
                entrypoint: handler
                runtime: node8
                env:
                    A_NUMBER: 6.66
            EOF
    -   in: bn deploy invalidenv
        exit: 1
        err: |-
            *A_NUMBER's value is not a string*
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs

- test: "envs: fail to deploy if empty string in env"
  steps:
    -   in: bn create node8 emptiness
    -   in: |-
            cat <<EOF >/home/dockeruser/test/binaris.yml
            functions:
              emptiness:
                file: function.js
                entrypoint: handler
                runtime: node8
                env:
                    EMPTY: ""
            EOF
    -   in: bn deploy emptiness
        exit: 1
        err: |-
            *Empty string *EMPTY not supported.*
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs

- test: Test login (bad-path)
  steps:
    -   in: unset BINARIS_API_KEY
    -   in: echo 9239239 | bn login
        err: Invalid API key
        out: |-
            *
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1

- test: Test create (bad-path)
  steps:
    -   in: bn create node8 a*b*c*
        err: Invalid characters in function name a*b*c*. Use only letters and digits
        exit: 1
    -   in: bn create node8 a_bשcd@e+
        err: Invalid characters in function name a_bשcd@e+. Use only letters and digits
        exit: 1
    -   in: bn create node8 a=b~c,d.
        err: Invalid characters in function name a=b~c,d.. Use only letters and digits
        exit: 1
    -   in: bn create node8 a:b?c!d-
        err: Invalid characters in function name a:b?c!d-. Use only letters and digits
        exit: 1
    -   in: bn create
        err: "*Not enough non-option arguments: got 0, need at least 2"
        exit: 1
    -   in: bn create node8
        err: "*Not enough non-option arguments: got 1, need at least 2"
        exit: 1
    -   in: bn create abcd
        err: "*Not enough non-option arguments: got 1, need at least 2"
        exit: 1
    -   in: bn create cpp4096 abcd
        err: '*Invalid values:*Argument: runtime, Given: "cpp4096", Choices:*'
        exit: 1

- test: Test invoke (bad-path)
  steps:
    -   in: bn create node8 quarrelsometest -p /home/dockeruser/test/alloftheoptions
    -   in: bn invoke quarrelsometest -j myFile.json -d data
        err: Invoke flags --json(-j) and --data(-d) are mutually exclusive
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1
    -   in: bn invoke quarrelsometest -j myFile.json
        err: "ENOENT: no such file or directory, open 'myFile.json'"
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1
    -   in: bn invoke nosuchfunction
        err: |-
            Sorry, your function is not ready yet.
            Please try again.
            If this keeps happening, please contact support@binaris.com with the request ID.
            
            request_id: *
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1

- test: Test user code timeout (bad-path)
  cleanup:
    - bn remove timeoutforsure
  steps:
    -   in: bn create node8 timeoutforsure 
    -   in: |-
           cat > function.js << EOL
           exports.handler = async (body, req) => {
             const msleep = ms => new Promise(resolve => setTimeout(resolve, ms));
             await msleep(100000);
           };
           EOL
    -   in: bn deploy timeoutforsure
    -   in: bn invoke timeoutforsure
        err: |-
            <html>
            <head><title>504 Gateway Time-out</title></head>
            <body bgcolor="white">
            <center><h1>504 Gateway Time-out</h1></center>
            <hr><center>openresty/1.13.6.1</center>
            </body>
            </html>
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs

        exit: 1

- test: Test bad user node8 code (bad-path)
  cleanup:
    - bn remove doomedtofailnode8
  steps:
    -   in: bn create node8 doomedtofailnode8
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy doomedtofailnode8" to deploy the function)
    -   in: |-
            sed -i.bak "2i\  throw new Error('some error');" function.js
    -   in: bn deploy doomedtofailnode8
        out: |-
            Deployed function doomedtofailnode8
            Invoke with one of:
              "bn invoke doomedtofailnode8"
              "curl -H X-Binaris-Api-Key:* https://*"
    -   in: bn invoke doomedtofailnode8
        err: |-
            some error
            Error: some error
                at Bolt.exports.handler [as userEntryPoint] (/code/function.js:2:9)
                at *
                at <anonymous>
            
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs

        exit: 1

- test: Test bad user python2 code (bad-path)
  cleanup:
    - bn remove doomedtofailpy2
  steps:
    -   in: bn create python2 doomedtofailpy2
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy doomedtofailpy2" to deploy the function)
    -   in: |-
            sed -i.bak "2i\    sdasda" function.py
    -   in: bn deploy doomedtofailpy2
        out: |-
            Deployed function doomedtofailpy2
            Invoke with one of:
              "bn invoke doomedtofailpy2"
              "curl -H X-Binaris-Api-Key:* https://*"
    -   in: bn invoke doomedtofailpy2
        err: |-
            global name 'sdasda' is not defined
              File "/opt/binaris/py2/main.py", line 160, in run_handler
                response = yield gen.maybe_future(self._handler(body, request))
            ,  File "/code/function.py", line 2, in handler
                sdasda
            
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1

- test: Test bad user python3 code (bad-path)
  cleanup:
    - bn remove doomedtofailpy3
  steps:
    -   in: bn create python3 doomedtofailpy3
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy doomedtofailpy3" to deploy the function)
    -   in: |-
            sed -i.bak "2i\    sdasda" function.py
    -   in: bn deploy doomedtofailpy3
        out: |-
            Deployed function doomedtofailpy3
            Invoke with one of:
              "bn invoke doomedtofailpy3"
              "curl -H X-Binaris-Api-Key:* https://*"
    -   in: bn invoke doomedtofailpy3
        err: |-
            name 'sdasda' is not defined
              File "/opt/binaris/py3/main.py", line 160, in run_handler
                response = yield gen.maybe_future(self._handler(body, request))
            ,  File "/code/function.py", line 2, in handler
                sdasda
            
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1

- test: Test bad user pypy2 code (bad-path)
  cleanup:
    - bn remove doomedtofailpypy2
  steps:
    -   in: bn create pypy2 doomedtofailpypy2
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy doomedtofailpypy2" to deploy the function)
    -   in: |-
            sed -i.bak "2i\    sdasda" function.py
    -   in: bn deploy doomedtofailpypy2
        out: |-
            Deployed function doomedtofailpypy2
            Invoke with one of:
              "bn invoke doomedtofailpypy2"
              "curl -H X-Binaris-Api-Key:* https://*"
    -   in: bn invoke doomedtofailpypy2
        err: |-
            global name 'sdasda' is not defined
              File "/opt/binaris/py2/main.py", line 160, in run_handler
                response = yield gen.maybe_future(self._handler(body, request))
            ,  File "/code/function.py", line 2, in handler
                sdasda

        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1

- test: Test bad user java8 code (bad-path)
  cleanup:
    - bn remove doomedtofailjava8
  steps:
    -   in: bn create java8 doomedtofailjava8
        out: |-
            Created function * in /home/dockeruser/test
              (use "bn deploy doomedtofailjava8" to deploy the function)
    -   in: |-
            sed -i.bak '6s/.*/        throw new java.lang.Error("this is very bad");/' src/main/java/ExampleFunction.java
    -   in: gradle jar
    -   in: bn deploy doomedtofailjava8
        out: |-
            Deployed function doomedtofailjava8
            Invoke with one of:
              "bn invoke doomedtofailjava8"
              "curl -H X-Binaris-Api-Key:* https://*"
    -   in: bn invoke doomedtofailjava8
        err: |-
            <html>
            <head>
            <meta http-equiv="Content-Type" content="text/html;charset=ISO-8859-1"/>
            <title>Error 500 </title>
            </head>
            <body>
            <h2>HTTP ERROR: 500</h2>
            <p>Problem accessing /v1/run. Reason:
            <pre>    class java.lang.Error</pre></p>
            <hr /><a href="http://eclipse.org/jetty">Powered by Jetty:// 9.3.z-SNAPSHOT</a><hr/>
            </body>
            </html>
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1

- test: Test remove (bad-path)
  steps:
    -   in: bn create node8 dispensabledrop
    -   in: bn remove dispensabledrop
        err: "Error: No such function"
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1
    -   in: bn deploy dispensabledrop
    -   in: bn remove dispensabledrop
        out: "*Removed function dispensabledrop*"
    -   in: bn remove dispensabledrop
        err: "Error: No such function"
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1
    -   in: bn remove
        err: "*Not enough non-option arguments: got 0, need at least 1"
        out: |-
        exit: 1

- test: Test logs (bad-path)
  steps:
    -   in: bn create node8 endlessclue
    -   in: bn logs endlessclue --since h23sdh2
        err: |-
             Invalid time format "h23sdh2"
        exit: 1
    -   in: bn logs endlessclue --since 231213daysf
        err: |-
             Invalid offset format, unknown unit "daysf"
        exit: 1
    -   in: BINARIS_LOG_ENDPOINT=fake.logs.binaris.invalid. bn logs amillionamillion
        err: "Error: getaddrinfo ENOTFOUND fake.logs.binaris.invalid. fake.logs.binaris.invalid.:443"
        exit: 1

- test: Invalid name in binaris.yml  (bad-path)
  setup:
    - bn create node8 pickypumpkin
    # replace line 2 of binaris.yml(function name) with a bad function name
    - sed -i '2 c \  inv@a-d:' binaris.yml
  steps:
    - in: bn deploy "inv@a-d"
      err: Invalid characters in function name inv@a-d. Use only letters and digits
      out: |-
          
          Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
      exit: 1

- test: Unknown command (bad-path)
  steps:
    -   in: bn alwaysbad
        err: "*Unknown command: 'alwaysbad'"
        exit: 1

- test: No permission
  setup:
    - mkdir /home/dockeruser/test/securedir
    - echo binaris | sudo  -S chown root:root /home/dockeruser/test/securedir
    - echo binaris | sudo  -S chmod 700 /home/dockeruser/test/securedir
  steps:
    -   in: bn create node8 orangehero -p /home/dockeruser/test/securedir
        err: "EACCES: permission denied, unlink '/home/dockeruser/test/securedir/*"
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1

- test: Invocation stats
  setup:
    - export FUNC_NAME="invokestats$RANDOM$RANDOM"
    - bn create node8 $FUNC_NAME
    - bn deploy $FUNC_NAME
  cleanup:
    - bn remove $FUNC_NAME
  steps:
    - in: bn invoke $FUNC_NAME
    - in: sleep 100 # Enough time to get minute-aggregated stats
    - in: bn stats --since "3m"
      out: |-
        FUNCTION* METRIC* VALUE* SINCE* UNTIL*
        invokestats* function_duration_us* #* #-#-#T#:#:#.#Z* #-#-#T#:#:#.#Z*
        invokestats* function_invocations* #* #-#-#T#:#:#.#Z* #-#-#T#:#:#.#Z*
    - in: bn stats --since "3m" --json
      out: '{*"metrics":[*'

- test: Empty stats
  steps:
    - in: bn stats --until "1990-01-01T00:00:00Z"
      out: No matching usage stats found

- test: Bad input to stats
  steps:
    - in: bn stats --since 'not a valid time'
      exit: 1
      err: Invalid time format "not a valid time"

# Disabled until the switch is made to yargs
#
# - test: Superfluous output(bad-path)
#   steps:
#     -   in: bn create init init
#         err: Argument "*" is not a valid input to *
#         exit: 1
#     -   in: bn create sadmksad
#         err: Argument "sadmksad" is not a valid input to create
#         exit: 1
#     -   in: bn deploy init
#         err: Argument "init" is not a valid input to deploy
#         exit: 1
#     -   in: bn logs notlogs
#         err: Argument "notlogs" is not a valid input to logs
#         exit: 1

- test: No such path (bad-path)
  steps:
    -   in: bn deploy livelyhall -p /home/dockeruser/test/bogus/comeon/really/hello.js
        err: "ENOENT: no such file or directory, open '/home/dockeruser/test/bogus/comeon/really/hello.js/binaris.yml'"
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1

- test: No API key or conf file (bad-path)
  setup:
    - unset BINARIS_API_KEY
  steps:
    -   in: bn create node8 handsomelycalendar
    -   in: bn deploy handsomelycalendar
        err: Binaris conf file could not be read and BINARIS_API_KEY is undefined, please use "bn login"
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1

- test: Invalid API key (bad-path)
  setup:
    - export BINARIS_API_KEY=impossiblekey2313213
  steps:
    -   in: bn create node8 perplexingpersimmon
    -   in: bn deploy perplexingpersimmon
        err: |-
            Error: Invalid API key
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1
    -   in: bn list
        err: |-
            Error: Invalid API key
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1
    -   in: BINARIS_API_KEY=boguskey bn invoke perplexingpersimmon
        err: |-
            Unauthorized request. Make sure you're passing the right API key.
            request_id: *
        out: |-
            
            Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
        exit: 1

- test: Deploy of 200MB function succeeds
  setup:
    - bn create python2 largeData200MB
    - dd if=/dev/urandom bs=1048576 count=200 of=large.data
  cleanup:
    - bn remove largeData200MB
  steps:
    - in: bn deploy largeData200MB
      out: |-
          Deployed function *
          Invoke with one of:
            "bn invoke *"
            "curl -H X-Binaris-Api-Key:* https://*"
    - in: bn invoke largeData200MB
      out: |-
          "Hello World!"

- test: Test if imagemagick exists in runtime environment
  setup:
      - bn create node8 imagemagick
      - npm i shelljs
      - |-
        cat <<EOF >/home/dockeruser/test/function.js
        
        const shell = require('shelljs');
        exports.handler = async() => {
          return shell.exec('convert --version');
        };
        EOF
      - bn deploy imagemagick
  cleanup:
      - bn remove imagemagick
  steps:
      - in: bn invoke imagemagick
        out: |-
            "Version: ImageMagick *

- test: Test invalid option to command (bad-path)
  steps:
    -   in: bn invoke hello --notarealarg
        err: |-
            Usage: bn invoke <function> [options]
            
            Positionals:
              function  Function name  [string] [required]
            
            Options:
              --version   Show version number  [boolean]
              --help, -h  Show help  [boolean]
              --json, -j  Path to file containing JSON data  [string]
              --data, -d  Data to send with invocation  [string]
            
            Examples:
                // invoke a function
                bn invoke foo
            
                // invoke using JSON file data
                bn invoke foo --json ./path/to/myfile.json
            
                // invoke foo and send JSON data in the body
                bn invoke foo --data '{ "name": "helloworld" }'
            
            Unknown argument: notarealarg
        exit: 1

- test: Stats help
  steps:
    - in: bn stats --help
      out: |-
        Usage: bn stats [options]

        Options:
          --version    Show version number  [boolean]
          --help, -h   Show help  [boolean]
          --since, -s  Output statistics after given ISO timestamp (inclusive)  [string]
          --until, -u  Output statistics until given ISO timestamp (non-inclusive)  [string]
          --json       Output as JSON

        Examples:
            // Retrieve all usage statistics of the account
            bn stats

            // Retrieve all statistics since the timestamp until now (~1 minute)
            bn stats --since 2018-03-09T22:12:21.861Z

            // Statistics over the last 24h
            bn stats --since 1d

            // Retrieve all statistics of a certain month
            bn stats --since 2018-03-01T00:00:00Z --until 2018-04-01T00:00:00Z
- test: Deploy of 300MB function fails with significant error message
  setup:
    - bn create python2 largeData300MB
    - dd if=/dev/urandom bs=1048576 count=300 of=very.large.data
  steps:
    - in: bn deploy largeData300MB
      err: "Error: Payload too large"
      out: |-
          
          Tip: You can export BINARIS_LOG_LEVEL=[silly|debug|verbose] to view debug logs
      exit: 1

- test: Test deploy of long name (good-path)
  setup:
    - export LONG_NAME=binarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinaris1234
  steps:
    -   in: bn create node8 $LONG_NAME
    -   in: bn deploy $LONG_NAME
    -   in: bn invoke $LONG_NAME
        out: |-
            *"Hello World!"*
    -   in: bn remove $LONG_NAME

- test: Test deploy of somewhat long name (bad-path)
  setup:
    - export SERVER_LONG_NAME=binarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinaris
  steps:
    -   in: bn create node8 $SERVER_LONG_NAME
    -   in: bn deploy $SERVER_LONG_NAME
        exit: 1
        err: "Error: ERR_FUNCTION_NAME_TOO_LONG"

- test: Test remove of somewhat long name (bad-path)
  steps:
    -   in: bn remove binarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinaris
        exit: 1
        err: "Error: ERR_FUNCTION_NAME_TOO_LONG"

- test: Test deploy of very long name (bad-path)
  setup:
    - export LOCAL_LONG_NAME=binarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinarisbinaris1111
  steps:
    -   in: bn create node8 $LOCAL_LONG_NAME
    -   in: bn deploy $LOCAL_LONG_NAME
        exit: 1
        err: "ENAMETOOLONG: name too long, open '/home/dockeruser/test/.binaris/binaris*1111.tgz'"

- test: Test perf 1 second (good-path)
  setup:
    - bn create node8 measure1sec
    - bn deploy measure1sec
  cleanup:
    - bn remove measure1sec
  steps:
    -   in: bn perf -t 1 measure1sec
        out: |-
            Running performance test on function measure1sec.
            Executing 5000 invocations with 1 "thread" up to 1 second.
            Stand by for results...

            Perf summary
            ============
            Total time  * s*
            Invocations *
            Errors      *
            Rate        * rps*

            Latencies
            =========
            Mean * ms*
            Min  * ms*
            Max  * ms*
            50%  * ms*
            90%  * ms*
            95%  * ms*
            99%  * ms*

- test: Test perf 100 invocations (good-path)
  setup:
    - bn create node8 measure100
    - bn deploy measure100
  cleanup:
    - bn remove measure100
  steps:
    -   in: bn perf -n 100 measure100
        out: |-
            Running performance test on function measure100.
            Executing 100 invocations with 1 "thread".
            Stand by for results...

            Perf summary
            ============
            Total time  * s*
            Invocations *
            Errors      *
            Rate        * rps*

            Latencies
            =========
            Mean * ms*
            Min  * ms*
            Max  * ms*
            50%  * ms*
            90%  * ms*
            95%  * ms*
            99%  * ms*

- test: empty env
  steps:
    -   in: bn create node8 emptyenv
    -   in: |-
            cat <<EOF >>/home/dockeruser/test/binaris.yml
                env:
                    nosuchenv:
            EOF
    -   in: bn deploy emptyenv
        out: |-
            Ignoring non existing env var 'nosuchenv'*
    -   in: |-
            nosuchenv= bn deploy emptyenv
        err: |-
            Empty existing env var 'nosuchenv' is not supported
        exit: 1
    -  in: bn remove emptyenv

- test: non dict env
  steps:
    -   in: bn create node8 nondictenv
    -   in: |-
            cat <<EOF >>/home/dockeruser/test/binaris.yml
                env:
                    value
            EOF
    -   in: bn deploy nondictenv
        exit: 1
        err: YAML env section must be a dictionary.
